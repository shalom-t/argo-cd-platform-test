apiVersion: v1
kind: Namespace
metadata:
  name: superset
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.9.4
  name: superset-redis
  namespace: superset
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.9.4
  name: superset-redis-configuration
  namespace: superset
---
apiVersion: v1
data:
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.9.4
  name: superset-redis-health
  namespace: superset
---
apiVersion: v1
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.9.4
  name: superset-redis-scripts
  namespace: superset
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: superset
    chart: superset-0.12.1
    heritage: Helm
    release: superset
  name: superset-config
  namespace: superset
stringData:
  superset_bootstrap.sh: |
    #!/bin/bash
    if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid 0" > ~/bootstrap; fi
  superset_config.py: |2

    import os
    from flask_caching.backends.rediscache import RedisCache

    def env(key, default=None):
        return os.getenv(key, default)

    MAPBOX_API_KEY = env('MAPBOX_API_KEY', '')
    CACHE_CONFIG = {
          'CACHE_TYPE': 'RedisCache',
          'CACHE_DEFAULT_TIMEOUT': 300,
          'CACHE_KEY_PREFIX': 'superset_',
          'CACHE_REDIS_HOST': env('REDIS_HOST'),
          'CACHE_REDIS_PORT': env('REDIS_PORT'),
          'CACHE_REDIS_PASSWORD': env('REDIS_PASSWORD'),
          'CACHE_REDIS_DB': env('REDIS_DB', 1),
    }
    DATA_CACHE_CONFIG = CACHE_CONFIG

    SQLALCHEMY_DATABASE_URI = f"postgresql+psycopg2://{env('DB_USER')}:{env('DB_PASS')}@{env('DB_HOST')}:{env('DB_PORT')}/{env('DB_NAME')}"
    SQLALCHEMY_TRACK_MODIFICATIONS = True

    class CeleryConfig:
      imports  = ("superset.sql_lab", )
      broker_url = f"redis://{env('REDIS_HOST')}:{env('REDIS_PORT')}/0"
      result_backend = f"redis://{env('REDIS_HOST')}:{env('REDIS_PORT')}/0"

    CELERY_CONFIG = CeleryConfig
    RESULTS_BACKEND = RedisCache(
          host=env('REDIS_HOST'),
          port=env('REDIS_PORT'),
          key_prefix='superset_results'
    )
  superset_init.sh: |
    #!/bin/sh
    set -eu
    echo "Upgrading DB schema..."
    superset db upgrade
    echo "Initializing roles..."
    superset init

    echo "Creating admin user..."
    superset fab create-admin \
                    --username admin \
                    --firstname Superset \
                    --lastname Admin \
                    --email admin@superset.local \
                    --password admin1234 \
                    || true

    if [ -f "/app/configs/import_datasources.yaml" ]; then
      echo "Importing database connections.... "
      superset import_datasources -p /app/configs/import_datasources.yaml
    fi
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: superset
    chart: superset-0.12.1
    heritage: Helm
    release: superset
  name: superset-env
  namespace: superset
stringData:
  DB_HOST: superset-postgresql
  DB_NAME: superset
  DB_PASS: superset
  DB_PORT: "5432"
  DB_USER: superset
  REDIS_HOST: superset-redis-headless
  REDIS_PORT: "6379"
type: Opaque
---
apiVersion: v1
data:
  password: c2hhbG9tMTIzIUAj
  postgres-password: YTJKdGN0ZVlWRw==
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
  name: superset-postgresql
  namespace: superset
type: Opaque
---
apiVersion: v1
data:
  redis-password: c2hhbG9tMTIzIUAj
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.9.4
  name: superset-redis
  namespace: superset
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: superset
    chart: superset-0.12.1
    heritage: Helm
    release: superset
  name: superset
  namespace: superset
spec:
  ports:
  - name: http
    port: 8088
    protocol: TCP
    targetPort: http
  selector:
    app: superset
    release: superset
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
  name: superset-postgresql
  namespace: superset
spec:
  ports:
  - name: tcp-postgresql
    nodePort: null
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: postgresql
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: superset-postgresql-hl
  namespace: superset
spec:
  clusterIP: None
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: postgresql
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.9.4
  name: superset-redis-headless
  namespace: superset
spec:
  clusterIP: None
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: redis
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.9.4
  name: superset-redis-master
  namespace: superset
spec:
  internalTrafficPolicy: Cluster
  ports:
  - name: tcp-redis
    nodePort: null
    port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: redis
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: superset
    chart: superset-0.12.1
    heritage: Helm
    release: superset
  name: superset
  namespace: superset
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
      release: superset
  template:
    metadata:
      annotations:
        checksum/configOverrides: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/configOverridesFiles: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/connections: bca800c8f10c8d7ae9b76ceb31ee3102f06f5289b3aa18550ce875413484a11e
        checksum/extraConfigs: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/extraSecretEnv: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/extraSecrets: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/superset_bootstrap.sh: dc9a47141051ced34960c313860a55e03eb48c1fa36a0ed25c03ad60cd3b5c48
        checksum/superset_config.py: 63dbcea8b7a5447c76d4a4d50417a530517ab7633f03cf3a1c93d2b1ab3ffd60
        checksum/superset_init.sh: 680ccfa096bbb710b6b24a43781487cc9ca7d5d2ecfe27b02a931126b7e06e33
      labels:
        app: superset
        release: superset
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - . /app/pythonpath/superset_bootstrap.sh; /usr/bin/run-server.sh
        env:
        - name: SUPERSET_PORT
          value: "8088"
        envFrom:
        - secretRef:
            name: superset-env
        image: apachesuperset.docker.scarf.sh/apache/superset:3.1.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 1
        name: superset
        ports:
        - containerPort: 8088
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 512Mi
        startupProbe:
          failureThreshold: 60
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /app/pythonpath
          name: superset-config
          readOnly: true
      initContainers:
      - command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
        envFrom:
        - secretRef:
            name: superset-env
        image: apache/superset:dockerize
        imagePullPolicy: IfNotPresent
        name: wait-for-postgres
      securityContext:
        runAsUser: 0
      volumes:
      - name: superset-config
        secret:
          secretName: superset-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: superset-worker
    chart: superset-0.12.1
    heritage: Helm
    release: superset
  name: superset-worker
  namespace: superset
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset-worker
      release: superset
  template:
    metadata:
      annotations:
        checksum/configOverrides: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/configOverridesFiles: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/connections: bca800c8f10c8d7ae9b76ceb31ee3102f06f5289b3aa18550ce875413484a11e
        checksum/extraConfigs: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/extraSecretEnv: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/extraSecrets: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/superset_bootstrap.sh: dc9a47141051ced34960c313860a55e03eb48c1fa36a0ed25c03ad60cd3b5c48
        checksum/superset_config.py: 63dbcea8b7a5447c76d4a4d50417a530517ab7633f03cf3a1c93d2b1ab3ffd60
      labels:
        app: superset-worker
        release: superset
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - . /app/pythonpath/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app
          worker
        env:
        - name: SUPERSET_PORT
          value: "8088"
        envFrom:
        - secretRef:
            name: superset-env
        image: apachesuperset.docker.scarf.sh/apache/superset:3.1.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 60
        name: superset
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 512Mi
        volumeMounts:
        - mountPath: /app/pythonpath
          name: superset-config
          readOnly: true
      initContainers:
      - command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT"
          -timeout 120s
        envFrom:
        - secretRef:
            name: superset-env
        image: apache/superset:dockerize
        imagePullPolicy: IfNotPresent
        name: wait-for-postgres-redis
      securityContext:
        runAsUser: 0
      volumes:
      - name: superset-config
        secret:
          secretName: superset-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
  name: superset-postgresql
  namespace: superset
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: postgresql
  serviceName: superset-postgresql-hl
  template:
    metadata:
      annotations: null
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: superset
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.1.6
      name: superset-postgresql
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: primary
                  app.kubernetes.io/instance: superset
                  app.kubernetes.io/name: postgresql
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: /bitnami/postgresql
        - name: PGDATA
          value: /bitnami/postgresql/data
        - name: POSTGRES_USER
          value: shalom
        - name: POSTGRES_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: superset-postgresql
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: superset-postgresql
        - name: POSTGRES_DB
          value: shalom
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
        - name: POSTGRESQL_ENABLE_TLS
          value: "no"
        - name: POSTGRESQL_LOG_HOSTNAME
          value: "false"
        - name: POSTGRESQL_LOG_CONNECTIONS
          value: "false"
        - name: POSTGRESQL_LOG_DISCONNECTIONS
          value: "false"
        - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
          value: "off"
        - name: POSTGRESQL_CLIENT_MIN_MESSAGES
          value: error
        - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
          value: pgaudit
        image: docker.io/bitnami/postgresql:14.6.0-debian-11-r13
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "shalom" -d "dbname=shalom" -h 127.0.0.1 -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: postgresql
        ports:
        - containerPort: 5432
          name: tcp-postgresql
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "shalom" -d "dbname=shalom" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits: {}
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /bitnami/postgresql
          name: data
      hostIPC: false
      hostNetwork: false
      initContainers: null
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      volumes:
      - emptyDir:
          medium: Memory
        name: dshm
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.9.4
  name: superset-redis-master
  namespace: superset
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: redis
  serviceName: superset-redis-headless
  template:
    metadata:
      annotations:
        checksum/configmap: fe1cca2dea4020cb4b1623fc950515f7338ac9fd6e0328821274263d9e0e4d64
        checksum/health: 73f335f1a98f6f244d0ef2e3f93af8046efda1328e0421e6099d13241de96558
        checksum/scripts: ce55477815539ae6de99ea9d0be8bf4e53b2fed189b700f9c255d6f0762dfca3
        checksum/secret: 3fd3df18487fe6d83434fb43fa74c70f631075cbcace85fe6bbf8f1b13daf709
      labels:
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: superset
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.9.4
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: master
                  app.kubernetes.io/instance: superset
                  app.kubernetes.io/name: redis
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - -c
        - /opt/bitnami/scripts/start-scripts/start-master.sh
        command:
        - /bin/bash
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: superset-redis
        - name: REDIS_TLS_ENABLED
          value: "no"
        - name: REDIS_PORT
          value: "6379"
        image: docker.io/bitnami/redis:7.0.10-debian-11-r4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 6
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 1
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 2
        resources:
          limits: {}
          requests: {}
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /opt/bitnami/scripts/start-scripts
          name: start-scripts
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
        - mountPath: /opt/bitnami/redis/mounted-etc
          name: config
        - mountPath: /opt/bitnami/redis/etc/
          name: redis-tmp-conf
        - mountPath: /tmp
          name: tmp
      securityContext:
        fsGroup: 1001
      serviceAccountName: superset-redis
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 493
          name: superset-redis-scripts
        name: start-scripts
      - configMap:
          defaultMode: 493
          name: superset-redis-health
        name: health
      - configMap:
          name: superset-redis-configuration
        name: config
      - emptyDir: {}
        name: redis-tmp-conf
      - emptyDir: {}
        name: tmp
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: superset
        app.kubernetes.io/name: redis
      name: redis-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
  name: superset-init-db
  namespace: superset
spec:
  template:
    metadata:
      name: superset-init-db
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - . /app/pythonpath/superset_bootstrap.sh; . /app/pythonpath/superset_init.sh
        envFrom:
        - secretRef:
            name: superset-env
        image: apachesuperset.docker.scarf.sh/apache/superset:3.1.0
        imagePullPolicy: IfNotPresent
        name: superset-init-db
        resources: {}
        volumeMounts:
        - mountPath: /app/pythonpath
          name: superset-config
          readOnly: true
      initContainers:
      - command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
        envFrom:
        - secretRef:
            name: superset-env
        image: apache/superset:dockerize
        imagePullPolicy: IfNotPresent
        name: wait-for-postgres
      restartPolicy: Never
      securityContext:
        runAsUser: 0
      volumes:
      - name: superset-config
        secret:
          secretName: superset-config
